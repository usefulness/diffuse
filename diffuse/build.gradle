plugins {
  alias(libs.plugins.kotlin.jvm)
}

configurations {
  r8
}

dependencies {
  implementation project(':io')
  implementation project(':formats')
  implementation project(':reports')
  implementation libs.clikt

  r8 libs.r8

  testImplementation libs.junit.api
  testRuntimeOnly libs.junit.engine
  testImplementation libs.assertJ
}

def fatJarProvider = tasks.register('fatJar', Jar) { task ->
  task.dependsOn(configurations.named('runtimeClasspath'))
  task.dependsOn(tasks.named('jar'))

  task.archiveClassifier.set('fat')

  task.manifest {
    attributes 'Main-Class': 'com.jakewharton.diffuse.Diffuse'
    attributes 'Implementation-Version': archiveVersion
  }

  def sourceClasses = sourceSets.main.output.classesDirs
  task.inputs.files(sourceClasses)
  task.from files(sourceClasses)
  task.from configurations.named('runtimeClasspath').map {
    it.asFileTree.files
      .collect { it.isDirectory() ? it : zipTree(it) }
  }

  task.exclude '**/*.kotlin_metadata'
  task.exclude '**/*.kotlin_module'
  task.exclude '**/*.kotlin_builtins'
  task.exclude '**/module-info.class'
  task.exclude 'META-INF/maven/**'
  task.exclude 'META-INF/proguard/**'
  task.exclude 'META-INF/*.version'
  task.exclude '**/*.proto'
  task.exclude '**/*.dex'
  task.exclude 'LICENSE'
  task.exclude 'NOTICE'
  task.exclude 'r8-version.properties'
  task.exclude 'migrateToAndroidx/*'
  task.exclude 'api_database/*'
}

def r8File = layout.buildDirectory.file("libs/$archivesBaseName-$version-r8.jar").get().asFile
def rulesFile = project.file("src/main/rules.pro")
def r8JarProvider = tasks.register('r8Jar', JavaExec) { task ->
  task.javaLauncher.set(javaToolchains.launcherFor { spec ->
    spec.languageVersion.set(JavaLanguageVersion.of(JavaVersion.VERSION_17.majorVersion))
  })
  def fatJar = fatJarProvider.get()
  def fatJarFile = fatJar.archiveFile
  task.dependsOn(fatJar)
  task.inputs.file(fatJarFile)
  task.inputs.file(rulesFile)
  task.outputs.file(r8File)

  task.classpath(configurations.r8)
  task.mainClass.set('com.android.tools.r8.R8')
  task.args = [
    '--release',
    '--classfile',
    '--output', r8File.path,
    '--pg-conf', rulesFile.path,
    '--lib', System.getProperty('java.home').toString(),
    fatJarFile.get().toString(),
  ]
}

def binaryFile = layout.buildDirectory.file("libs/$archivesBaseName-$version-binary.jar").get().asFile
def binaryJar = tasks.register('binaryDiffuseJar') { task ->
  task.dependsOn(r8JarProvider)

  task.inputs.file(r8File)
  task.outputs.file(binaryFile)

  task.doLast {
    binaryFile.getParentFile().mkdirs()
    binaryFile.delete()
    binaryFile << "#!/bin/sh\n\nexec java \$JAVA_OPTS -jar \$0 \"\$@\"\n\n"
    r8File.withInputStream { binaryFile.append it }

    binaryFile.setExecutable true, false
  }
}

[11, 17].forEach { majorVersion ->
  def jdkTest = tasks.register("testJdk$majorVersion", Test) {
    javaLauncher = javaToolchains.launcherFor {
      languageVersion = JavaLanguageVersion.of(majorVersion)
    }

    description = "Runs the test suite on JDK $majorVersion"
    group = LifecycleBasePlugin.VERIFICATION_GROUP

    // Copy inputs from normal Test task.
    def testTask = tasks.getByName("test")
    classpath = testTask.classpath
    testClassesDirs = testTask.testClassesDirs
  }
  tasks.named("check").configure { dependsOn(jdkTest) }
}

artifacts {
  archives file: binaryFile, name: 'binary', type: 'jar', builtBy: binaryJar, classifier: 'diffuse'
}
